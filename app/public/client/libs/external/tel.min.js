(function (global) {

  function TinyTel(opts) {
    opts = opts || {};
    var maxTxt = opts.maxTextLen || 60;        // clip long text nodes
    var buf = [];      // JSON objects
    var str = [];      // 1-line serialisations
    var keys = {};     // {path:{k:'abc',t:123}} aggregating keystrokes

    /* ---------- helpers ---------- */
    function now() { return +new Date(); }
    function clip(t) { return (t || '').replace(/\s+/g, ' ').trim().slice(0, maxTxt); }
    function push(obj, s) { buf.push(obj); str.push(s); }

    function path(el) {
      if (!el || el === document) { return 'document'; }
      var parts = [];
      while (el && el.nodeType === 1 && parts.length < 5) {
        var n = el.tagName.toLowerCase();
        if (el.id) { parts.unshift(n + '#' + el.id); break; }
        var cls = (el.className || '').split(/\s+/)[0];
        var idx = [].indexOf.call(el.parentNode ? el.parentNode.children : [], el) + 1;
        parts.unshift(n + (cls ? '.' + cls : '') + ':nth-child(' + idx + ')');
        el = el.parentNode;
      }
      return parts.join('>');
    }

    function flushKeys() {
      for (var p in keys) if (keys.hasOwnProperty(p)) {
        var r = keys[p];
        push(
          { e: 'k', t: r.t, p: p, k: r.k },
          new Date(r.t).toLocaleString() + '|k|' + r.tagName + '|' + r.k + '|' + p
        );
      }
      keys = {};
    }

    document.addEventListener('click', function (ev) {
      var el = ev.target;
      var p = path(el);
      var txt = clip(el.innerText || el.textContent);
      var ts = now();
      push(
        { e: 'c', t: ts, p: p, x: ev.clientX, y: ev.clientY, tx: txt },
        new Date(ts).toLocaleString() + '|c|' + el.tagName + '|' + txt + '|' + p + '|' + ev.clientX + ',' + ev.clientY
      );
    }, true);

    document.addEventListener('keydown', function (ev) {
      var key = ev.key;
      if (key.length !== 1 && key !== 'Backspace' && key !== 'Enter') { return; }
      var p = path(ev.target);
      var r = keys[p];
      if (!r) { r = keys[p] = { k: '', t: now() }; }
      if (key === 'Backspace') { r.k = r.k.slice(0, -1); }
      else if (key === 'Enter') { r.k += '⏎'; }
      else { r.k += key; }
      r.tagName = ev.target.tagName;
    }, true);

    window.addEventListener('resize', function () {
      var ts = now();
      push(
        { e: 'w', t: ts, w: window.innerWidth + 'x' + window.innerHeight },
        new Date(ts).toLocaleString() + '|w|' + window.innerWidth + 'x' + window.innerHeight
      );
    });

    (function init() {
      var ts = now();
      push(
        {
          e: 'i', t: ts,
          ua: navigator.userAgent,
          pl: navigator.platform,
          ln: navigator.language,
          w: window.innerWidth + 'x' + window.innerHeight
        },
        new Date(ts).toLocaleString() + '|i|' + navigator.userAgent + '|' + navigator.platform + '|' +
        navigator.language + '|' + window.innerWidth + 'x' + window.innerHeight
      );
    })();

    return {
      /**
       * Returns {json:Array, lines:Array} then empties both buffers.
       * @param {Function=} cb optional → cb(jsonArray, stringArray)
       */
      flush: function (cb) {
        flushKeys();
        var j = buf.slice();
        var l = str.slice();
        buf.length = 0;
        str.length = 0;
        if (cb) { cb(j, l); }
        return { json: j, lines: l };
      }
    };
  }

  global.TinyTel = TinyTel;

})(this);
